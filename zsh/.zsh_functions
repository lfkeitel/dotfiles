maclookup() {
    # I don't call curl by itself because a normal response will not return a newline
    # but a failed response will. This removes any trailing whitespace and ensures
    # there's always a new line.
    echo $(curl -s "https://api.macvendors.com/$1")
}

sudossh() {
    ssh -t $1 sudo su
}

sys-upgrade() {
    linux_distro="$(gawk -F= '/^NAME/{print $2}' /etc/os-release 2>/dev/null | tr -d '"')"
    if [[ $linux_distro == "Ubuntu" ]]; then
        sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y
    elif [[ $linux_distro == "Fedora" ]]; then
        sudo dnf upgrade -y
    elif [[ $linux_distro == "Arch Linux" ]]; then
        yay
    elif [[ "$(uname)" == "Darwin" ]]; then
        brew upgrade
    fi
}

gogithub() {
    local repo="git@github.com:${1}.git"
    local repo_path="$GOPATH/src/github.com/${1}"
    local current_dir="$(pwd)"
    repo_path="$(dirname $repo_path)"
    mkdir -p $repo_path
    cd $repo_path
    git clone $repo
    cd $current_dir
}

better_cat() {
    [ -d "$1" ] && ls -lah "$1" && return
    command cat "$@"
}

format_project_code() {
    # If not number, return early
    if ! [[ $1 =~ '^[0-9]+$' ]]; then
        echo '000'
        return
    fi

    # Trim leading zeros
    num=$(echo $1 | sed 's/^0*//')
    [[ -z $num ]] && num='0'

    # Pad number to three digits
    if [[ $num -lt 10 ]]; then
        echo "00$num"
    elif [[ $num -lt 100 ]]; then
        echo "0$num"
    else
        echo $num
    fi
}

code_jump() {
    # If arg is a number, cd to project
    if [[ $1 =~ '^[0-9]+$' ]]; then
        project=$(format_project_code $1)
        cd $CODE_DIR/$project*
        return
    fi

    list="$($FINDCMD $CODE_DIR -maxdepth 1 -printf "%f\n" | $GREPCMD -P '\d{3}\-' | sort)"
    [[ -n $1 ]] && list="$(echo "$list" | $GREPCMD $1)"

    list_rows=$(echo "$list" | wc -l)
    term_rows=$(stty size | cut -d' ' -f1)

    if [[ -z $(echo "$list" | tr -d "\n") ]]; then
        echo "No matching projects found"
        return
    fi

    [[ $(($list_rows + 2)) -gt $term_rows ]] && echo "$list" | less -e
    echo "$list"

    echo
    read "project?Select a project or press enter: "
    if [[ $project =~ '^[0-9]+$' ]]; then
        project=$(format_project_code $project)
        cd $CODE_DIR/$project*
    fi
}

project_jump() {
    cd "$1"
    if [[ $# -gt 1 ]]; then
        shift
        $@
    fi
}

gen_project_aliases() {
    while IFS= read -r dir; do
        code=$(echo "$dir" | cut -d- -f1)
        alias $code="project_jump $CODE_DIR/$dir"
    done < <($FINDCMD $CODE_DIR -maxdepth 1 -type d -printf "%f\n" | $GREPCMD -P '\d{3}\-')
}
gen_project_aliases

cd_go_folder() {
    local GOPATH="${GOPATH:-$HOME/go}"
    local DEST="$(find $GOPATH -lname $PWD)"
    [[ -n $DEST ]] && cd $DEST
}

go_mod() {
    case $1 in
        on) export GO111MODULE=on;;
        off) export GO111MODULE=off;;
        *) export GO111MODULE=auto;;
    esac
}

activate() {
    VENV_NAME="$1"
    VIRENV_ROOT="$HOME/code/venv"

    if [ -z "$VENV_NAME" ]; then
        echo "Available Virtual Environments:"
        $FINDCMD ~/code/venv -maxdepth 1 -type d  -printf " %f\n" | tail -n +2 | sort
        return
    fi

    source $VIRENV_ROOT/$VENV_NAME/bin/activate
}
alias act='activate'

_ssh_alias() {
    command ssh $@
    tmux_color
}
alias ssh='_ssh_alias'

_scp_alias() {
    command scp $@
    tmux_color
}
alias scp='_scp_alias'


autoenv_dis() {
    AUTOENV_DISABLED=1
}

autoenv_en() {
    AUTOENV_DISABLED=0
}

_docker_wrapper() {
    # Ensure tmux coloring is reset when using docker over SSH
    command docker $@
    tmux_color
}
alias docker='_docker_wrapper'

_please() {
    last_cmd="$(fc -ln -1)"
    echo -n "sudo $last_cmd"
    read -k1 -s
    echo
    eval "sudo $last_cmd"
}
alias please='_please'
