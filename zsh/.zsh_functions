maclookup() {
    # I don't call curl by itself because a normal response will not return a newline
    # but a failed response will. This removes any trailing whitespace and ensures
    # there's always a new line.
    echo $(curl -s "https://api.macvendors.com/$1")
}

sudossh() {
    ssh -t $1 sudo su
}

sys-upgrade() {
    linux_distro="$(gawk -F= '/^NAME/{print $2}' /etc/os-release 2>/dev/null | tr -d '"')"
    if [[ $linux_distro == "Ubuntu" ]]; then
        sudo apt update && sudo apt upgrade -y && sudo apt autoremove -y
    elif [[ $linux_distro == "Fedora" ]]; then
        sudo dnf upgrade -y
    elif [[ $linux_distro == "Arch Linux" ]]; then
        sudo pacman -Syu
    elif [[ "$(uname)" == "Darwin" ]]; then
        brew upgrade
    fi
}

gogithub() {
    local repo="git@github.com:${1}.git"
    local repo_path="$GOPATH/src/github.com/${1}"
    local current_dir="$(pwd)"
    repo_path="$(dirname $repo_path)"
    mkdir -p $repo_path
    cd $repo_path
    git clone $repo
    cd $current_dir
}

better_cat() {
    [ -d "$1" ] && ls -lah "$1" && return
    command cat "$@"
}

format_project_code() {
    # If not number, return early
    if ! [[ $1 =~ '^[0-9]+$' ]]; then
        echo '000'
        return
    fi

    # Trim leading zeros
    num=$(echo $1 | sed 's/^0*//')
    [[ -z $num ]] && num='0'

    # Pad number to three digits
    if [[ $num -lt 10 ]]; then
        echo "00$num"
    elif [[ $num -lt 100 ]]; then
        echo "0$num"
    else
        echo $num
    fi
}

code_jump() {
    # If arg is a number, cd to project
    if [[ $1 =~ '^[0-9]+$' ]]; then
        project=$(format_project_code $1)
        cd $CODE_DIR/$project*
        return
    fi

    if [[ $1 == 'd' ]]; then
        project="$(dialog --dselect ~/code/ 20 80 3>&1 1>&2 2>&3 3>&1)"
        if [[ -n $project ]]; then
            cd "$project"
        fi
    else
        find $CODE_DIR -maxdepth 1 -printf "%f\n" | grep -P '\d{3}\-' | sort

        echo
        read "project?Select a project or press enter: "
        if [[ -n $project && $project != 'q' ]]; then
            project=$(format_project_code $project)
            cd $CODE_DIR/$project*
        fi
    fi
}

gen_project_aliases() {
    local grep_cmd="grep"
    local find_cmd="find"
    [[ $(uname) == 'Darwin' ]] && grep_cmd="ggrep" && find_cmd="gfind"
    while IFS= read -r dir; do
        code=$(echo "$dir" | cut -d- -f1)
        alias $code="cd $CODE_DIR/$dir"
    done < <($find_cmd $CODE_DIR -maxdepth 1 -type d -printf "%f\n" | $grep_cmd -P '\d{3}\-')
}
gen_project_aliases

cd_go_folder() {
    local GOPATH="${GOPATH:-$HOME/go}"
    local DEST="$(find $GOPATH -lname $PWD)"
    [[ -n $DEST ]] && cd $DEST
}
